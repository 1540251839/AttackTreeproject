"""
本文件主要目的是写一个函数，生成一个网络的拓扑结构，包括节点列表和边列表。这些数据用于绘制首页的关系图

**返回数据格式详解**

- **nodes**: 一个列表，其中每个元素都是一个字典，表示一个节点。每个节点具有以下两个属性：
  - `"name"`: 字符串类型，表示节点的唯一标识或名称。
  - `"symbolSize"`: 整数类型，表示节点的大小或视觉重要性，具体含义取决于后续的图表渲染库。

- **links**: 一个列表，其中每个元素也是一个字典，表示一条连接两个节点的边。每条边具有以下两个属性：
  - `"source"`: 字符串类型，引用`nodes`列表中某个节点的`"name"`属性，表示这条边的起始节点。
  - `"target"`: 字符串类型，引用`nodes`列表中另一个节点的`"name"`属性，表示这条边的目标节点。

nodes输出结果类似如下：
[
  {'name': '结点1', 'symbolSize': 10},
  {'name': '结点2', 'symbolSize': 20},
  {'name': '结点3', 'symbolSize': 30}
]

links输出结果类似如下：
[
  {'source': '结点1', 'target': '结点1'},
  {'source': '结点1', 'target': '结点2'},
  {'source': '结点1', 'target': '结点3'},
  {'source': '结点1', 'target': '结点4'},
  {'source': '结点1', 'target': '结点5'}
]

额外要求：
在设计图的拓扑时，要考虑如下问题：
1. 图是设备网络，因此图的结果需要满足设备网络的度特征。也就是，存在少量的（1到2个）节点连接到大量节点，而其他节点（5到10个）则连接到少量节点。
2. 图的节点数量和边数量不能太多，不然可视化效果不好。具体而言，点最好在10个左右，边最好在点的数量的1.5倍左右。
3. 对于图中点的大小，遵循如下规则：点连接的点（出度）越多，点的大小就越大。但是对于边缘节点，可以采取一些随机化扰动来使得边缘节点大小存在少量随机性。
"""


def generate_topo():
    nodes = []
    links = []
    # 结合注释完成这个函数
    return nodes, links